// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  //directUrl = env("DIRECT_URL")
}

model Profile {
  id        	String     	@id @default(uuid())
  username  	String?    	@unique @db.VarChar(36)
  firstname 	String?    	@db.VarChar(255)
  lastname  	String?    	@db.VarChar(255)
  avatar		  String?		  @db.VarChar(255)
  bio			    String?		  @db.Text
  active    	Boolean    	@default(true)
  models    	Model[]
  favorites   Favorite[]
  downloads   ModelDownload[]
  licenseId   Int?
  license     License?    @relation(fields: [licenseId], references: [id])
  following   Follow[]    @relation("UserFollow")
  followers   Follow[]    @relation("TargetFollow")
  socials     Json?
}

model Category {
  id    			Int     	@id @default(autoincrement())
  title			  String  	@db.VarChar(255)
  pluralTitle String?    @db.VarChar(255)
  slug        String    @db.VarChar(255)
  icon			  String?		@db.VarChar(255)
  order       Int       @unique
  active			Boolean		@default(true)
  createdAt 	DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt 	DateTime  @updatedAt @db.Timestamptz(3)
  models      Model[]
  deleted     Boolean   @default(false)
  sort        Int       @default(0)
}

model Model {
  id    			  String      @id @default(uuid())
  title			    String		  @db.VarChar(255)
  description		String?		  @db.Text
  ampName		  	String?		  @db.VarChar(255)
  modelPath		  String?		  @db.VarChar(255)
  filename		  String?		  @db.VarChar(255)
  filecount     Int?
  icon			    String?		  @db.VarChar(255)
  profileId 		String
  profile			  Profile		  @relation(fields: [profileId], references: [id])
  categoryId    Int
  category			Category	  @relation(fields: [categoryId], references: [id])
  favorites     Favorite[]
  downloads     ModelDownload[]
  private			  Boolean		  @default(false)
  tags			    String[]
  active			  Boolean		  @default(true)
  createdAt 		DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt 		DateTime    @updatedAt @db.Timestamptz(3)
  deleted       Boolean     @default(false)
  link          String?     @db.VarChar(255)
  licenseId     Int?
  license       License?    @relation(fields: [licenseId], references: [id])
}

model Favorite {
  id    		  Int       @id @default(autoincrement())
  modelId		  String
  model			  Model		  @relation(fields: [modelId], references: [id])
  profileId   String
  profile		  Profile		@relation(fields: [profileId], references: [id])
  createdAt 	DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt 	DateTime  @updatedAt @db.Timestamptz(3)
  deleted     Boolean   @default(false)
}

model ModelDownload {
  id          String       @id
  modelId		  String
  model			  Model		  @relation(fields: [modelId], references: [id])
  profileId   String?
  profile		  Profile?	@relation(fields: [profileId], references: [id])
  createdAt 	DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt 	DateTime  @updatedAt @db.Timestamptz(3)
  deleted     Boolean   @default(false)

  @@index(fields: [id])
  @@unique([id])
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  group       String?   @db.VarChar(255)
  active			Boolean		@default(true)
  createdAt 	DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt 	DateTime  @updatedAt @db.Timestamptz(3)
  deleted     Boolean   @default(false)
}

model Counts {
  name        String @id @db.VarChar(255)
  count       Int

  @@index(fields: [name])
  @@unique([name])
}

model License {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description	String?		@db.Text
  active			Boolean		@default(true)
  createdAt 	DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt 	DateTime  @updatedAt @db.Timestamptz(3)
  deleted     Boolean   @default(false)
  profiles    Profile[]
  models    	Model[]
}

model Follow {
  id            Int         @id @default(autoincrement())
  profileId 		String
  profile			  Profile		  @relation("UserFollow", fields: [profileId], references: [id])
  targetId      String
  target			  Profile		  @relation("TargetFollow", fields: [targetId], references: [id])
  active			  Boolean		  @default(true)
  createdAt 	  DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt 	  DateTime    @updatedAt @db.Timestamptz(3)
  deleted       Boolean     @default(false)

  @@unique([profileId, targetId])
}
